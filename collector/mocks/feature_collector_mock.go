package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/psolru/mikrotik-exporter/collector/context"
	"github.com/prometheus/client_golang/prometheus"
)

// FeatureCollectorMock implements collector.FeatureCollector
type FeatureCollectorMock struct {
	t minimock.Tester

	funcCollect          func(ctx *context.Context) (err error)
	inspectFuncCollect   func(ctx *context.Context)
	afterCollectCounter  uint64
	beforeCollectCounter uint64
	CollectMock          mFeatureCollectorMockCollect

	funcDescribe          func(ch chan<- *prometheus.Desc)
	inspectFuncDescribe   func(ch chan<- *prometheus.Desc)
	afterDescribeCounter  uint64
	beforeDescribeCounter uint64
	DescribeMock          mFeatureCollectorMockDescribe

	funcName          func() (s1 string)
	inspectFuncName   func()
	afterNameCounter  uint64
	beforeNameCounter uint64
	NameMock          mFeatureCollectorMockName
}

// NewFeatureCollectorMock returns a mock for collector.FeatureCollector
func NewFeatureCollectorMock(t minimock.Tester) *FeatureCollectorMock {
	m := &FeatureCollectorMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CollectMock = mFeatureCollectorMockCollect{mock: m}
	m.CollectMock.callArgs = []*FeatureCollectorMockCollectParams{}

	m.DescribeMock = mFeatureCollectorMockDescribe{mock: m}
	m.DescribeMock.callArgs = []*FeatureCollectorMockDescribeParams{}

	m.NameMock = mFeatureCollectorMockName{mock: m}

	return m
}

type mFeatureCollectorMockCollect struct {
	mock               *FeatureCollectorMock
	defaultExpectation *FeatureCollectorMockCollectExpectation
	expectations       []*FeatureCollectorMockCollectExpectation

	callArgs []*FeatureCollectorMockCollectParams
	mutex    sync.RWMutex
}

// FeatureCollectorMockCollectExpectation specifies expectation struct of the FeatureCollector.Collect
type FeatureCollectorMockCollectExpectation struct {
	mock    *FeatureCollectorMock
	params  *FeatureCollectorMockCollectParams
	results *FeatureCollectorMockCollectResults
	Counter uint64
}

// FeatureCollectorMockCollectParams contains parameters of the FeatureCollector.Collect
type FeatureCollectorMockCollectParams struct {
	ctx *context.Context
}

// FeatureCollectorMockCollectResults contains results of the FeatureCollector.Collect
type FeatureCollectorMockCollectResults struct {
	err error
}

// Expect sets up expected params for FeatureCollector.Collect
func (mmCollect *mFeatureCollectorMockCollect) Expect(ctx *context.Context) *mFeatureCollectorMockCollect {
	if mmCollect.mock.funcCollect != nil {
		mmCollect.mock.t.Fatalf("FeatureCollectorMock.Collect mock is already set by Set")
	}

	if mmCollect.defaultExpectation == nil {
		mmCollect.defaultExpectation = &FeatureCollectorMockCollectExpectation{}
	}

	mmCollect.defaultExpectation.params = &FeatureCollectorMockCollectParams{ctx}
	for _, e := range mmCollect.expectations {
		if minimock.Equal(e.params, mmCollect.defaultExpectation.params) {
			mmCollect.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCollect.defaultExpectation.params)
		}
	}

	return mmCollect
}

// Inspect accepts an inspector function that has same arguments as the FeatureCollector.Collect
func (mmCollect *mFeatureCollectorMockCollect) Inspect(f func(ctx *context.Context)) *mFeatureCollectorMockCollect {
	if mmCollect.mock.inspectFuncCollect != nil {
		mmCollect.mock.t.Fatalf("Inspect function is already set for FeatureCollectorMock.Collect")
	}

	mmCollect.mock.inspectFuncCollect = f

	return mmCollect
}

// Return sets up results that will be returned by FeatureCollector.Collect
func (mmCollect *mFeatureCollectorMockCollect) Return(err error) *FeatureCollectorMock {
	if mmCollect.mock.funcCollect != nil {
		mmCollect.mock.t.Fatalf("FeatureCollectorMock.Collect mock is already set by Set")
	}

	if mmCollect.defaultExpectation == nil {
		mmCollect.defaultExpectation = &FeatureCollectorMockCollectExpectation{mock: mmCollect.mock}
	}
	mmCollect.defaultExpectation.results = &FeatureCollectorMockCollectResults{err}
	return mmCollect.mock
}

//Set uses given function f to mock the FeatureCollector.Collect method
func (mmCollect *mFeatureCollectorMockCollect) Set(f func(ctx *context.Context) (err error)) *FeatureCollectorMock {
	if mmCollect.defaultExpectation != nil {
		mmCollect.mock.t.Fatalf("Default expectation is already set for the FeatureCollector.Collect method")
	}

	if len(mmCollect.expectations) > 0 {
		mmCollect.mock.t.Fatalf("Some expectations are already set for the FeatureCollector.Collect method")
	}

	mmCollect.mock.funcCollect = f
	return mmCollect.mock
}

// When sets expectation for the FeatureCollector.Collect which will trigger the result defined by the following
// Then helper
func (mmCollect *mFeatureCollectorMockCollect) When(ctx *context.Context) *FeatureCollectorMockCollectExpectation {
	if mmCollect.mock.funcCollect != nil {
		mmCollect.mock.t.Fatalf("FeatureCollectorMock.Collect mock is already set by Set")
	}

	expectation := &FeatureCollectorMockCollectExpectation{
		mock:   mmCollect.mock,
		params: &FeatureCollectorMockCollectParams{ctx},
	}
	mmCollect.expectations = append(mmCollect.expectations, expectation)
	return expectation
}

// Then sets up FeatureCollector.Collect return parameters for the expectation previously defined by the When method
func (e *FeatureCollectorMockCollectExpectation) Then(err error) *FeatureCollectorMock {
	e.results = &FeatureCollectorMockCollectResults{err}
	return e.mock
}

// Collect implements collector.FeatureCollector
func (mmCollect *FeatureCollectorMock) Collect(ctx *context.Context) (err error) {
	mm_atomic.AddUint64(&mmCollect.beforeCollectCounter, 1)
	defer mm_atomic.AddUint64(&mmCollect.afterCollectCounter, 1)

	if mmCollect.inspectFuncCollect != nil {
		mmCollect.inspectFuncCollect(ctx)
	}

	mm_params := &FeatureCollectorMockCollectParams{ctx}

	// Record call args
	mmCollect.CollectMock.mutex.Lock()
	mmCollect.CollectMock.callArgs = append(mmCollect.CollectMock.callArgs, mm_params)
	mmCollect.CollectMock.mutex.Unlock()

	for _, e := range mmCollect.CollectMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmCollect.CollectMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCollect.CollectMock.defaultExpectation.Counter, 1)
		mm_want := mmCollect.CollectMock.defaultExpectation.params
		mm_got := FeatureCollectorMockCollectParams{ctx}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCollect.t.Errorf("FeatureCollectorMock.Collect got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCollect.CollectMock.defaultExpectation.results
		if mm_results == nil {
			mmCollect.t.Fatal("No results are set for the FeatureCollectorMock.Collect")
		}
		return (*mm_results).err
	}
	if mmCollect.funcCollect != nil {
		return mmCollect.funcCollect(ctx)
	}
	mmCollect.t.Fatalf("Unexpected call to FeatureCollectorMock.Collect. %v", ctx)
	return
}

// CollectAfterCounter returns a count of finished FeatureCollectorMock.Collect invocations
func (mmCollect *FeatureCollectorMock) CollectAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCollect.afterCollectCounter)
}

// CollectBeforeCounter returns a count of FeatureCollectorMock.Collect invocations
func (mmCollect *FeatureCollectorMock) CollectBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCollect.beforeCollectCounter)
}

// Calls returns a list of arguments used in each call to FeatureCollectorMock.Collect.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCollect *mFeatureCollectorMockCollect) Calls() []*FeatureCollectorMockCollectParams {
	mmCollect.mutex.RLock()

	argCopy := make([]*FeatureCollectorMockCollectParams, len(mmCollect.callArgs))
	copy(argCopy, mmCollect.callArgs)

	mmCollect.mutex.RUnlock()

	return argCopy
}

// MinimockCollectDone returns true if the count of the Collect invocations corresponds
// the number of defined expectations
func (m *FeatureCollectorMock) MinimockCollectDone() bool {
	for _, e := range m.CollectMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CollectMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCollectCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCollect != nil && mm_atomic.LoadUint64(&m.afterCollectCounter) < 1 {
		return false
	}
	return true
}

// MinimockCollectInspect logs each unmet expectation
func (m *FeatureCollectorMock) MinimockCollectInspect() {
	for _, e := range m.CollectMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FeatureCollectorMock.Collect with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CollectMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCollectCounter) < 1 {
		if m.CollectMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to FeatureCollectorMock.Collect")
		} else {
			m.t.Errorf("Expected call to FeatureCollectorMock.Collect with params: %#v", *m.CollectMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCollect != nil && mm_atomic.LoadUint64(&m.afterCollectCounter) < 1 {
		m.t.Error("Expected call to FeatureCollectorMock.Collect")
	}
}

type mFeatureCollectorMockDescribe struct {
	mock               *FeatureCollectorMock
	defaultExpectation *FeatureCollectorMockDescribeExpectation
	expectations       []*FeatureCollectorMockDescribeExpectation

	callArgs []*FeatureCollectorMockDescribeParams
	mutex    sync.RWMutex
}

// FeatureCollectorMockDescribeExpectation specifies expectation struct of the FeatureCollector.Describe
type FeatureCollectorMockDescribeExpectation struct {
	mock   *FeatureCollectorMock
	params *FeatureCollectorMockDescribeParams

	Counter uint64
}

// FeatureCollectorMockDescribeParams contains parameters of the FeatureCollector.Describe
type FeatureCollectorMockDescribeParams struct {
	ch chan<- *prometheus.Desc
}

// Expect sets up expected params for FeatureCollector.Describe
func (mmDescribe *mFeatureCollectorMockDescribe) Expect(ch chan<- *prometheus.Desc) *mFeatureCollectorMockDescribe {
	if mmDescribe.mock.funcDescribe != nil {
		mmDescribe.mock.t.Fatalf("FeatureCollectorMock.Describe mock is already set by Set")
	}

	if mmDescribe.defaultExpectation == nil {
		mmDescribe.defaultExpectation = &FeatureCollectorMockDescribeExpectation{}
	}

	mmDescribe.defaultExpectation.params = &FeatureCollectorMockDescribeParams{ch}
	for _, e := range mmDescribe.expectations {
		if minimock.Equal(e.params, mmDescribe.defaultExpectation.params) {
			mmDescribe.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDescribe.defaultExpectation.params)
		}
	}

	return mmDescribe
}

// Inspect accepts an inspector function that has same arguments as the FeatureCollector.Describe
func (mmDescribe *mFeatureCollectorMockDescribe) Inspect(f func(ch chan<- *prometheus.Desc)) *mFeatureCollectorMockDescribe {
	if mmDescribe.mock.inspectFuncDescribe != nil {
		mmDescribe.mock.t.Fatalf("Inspect function is already set for FeatureCollectorMock.Describe")
	}

	mmDescribe.mock.inspectFuncDescribe = f

	return mmDescribe
}

// Return sets up results that will be returned by FeatureCollector.Describe
func (mmDescribe *mFeatureCollectorMockDescribe) Return() *FeatureCollectorMock {
	if mmDescribe.mock.funcDescribe != nil {
		mmDescribe.mock.t.Fatalf("FeatureCollectorMock.Describe mock is already set by Set")
	}

	if mmDescribe.defaultExpectation == nil {
		mmDescribe.defaultExpectation = &FeatureCollectorMockDescribeExpectation{mock: mmDescribe.mock}
	}

	return mmDescribe.mock
}

//Set uses given function f to mock the FeatureCollector.Describe method
func (mmDescribe *mFeatureCollectorMockDescribe) Set(f func(ch chan<- *prometheus.Desc)) *FeatureCollectorMock {
	if mmDescribe.defaultExpectation != nil {
		mmDescribe.mock.t.Fatalf("Default expectation is already set for the FeatureCollector.Describe method")
	}

	if len(mmDescribe.expectations) > 0 {
		mmDescribe.mock.t.Fatalf("Some expectations are already set for the FeatureCollector.Describe method")
	}

	mmDescribe.mock.funcDescribe = f
	return mmDescribe.mock
}

// Describe implements collector.FeatureCollector
func (mmDescribe *FeatureCollectorMock) Describe(ch chan<- *prometheus.Desc) {
	mm_atomic.AddUint64(&mmDescribe.beforeDescribeCounter, 1)
	defer mm_atomic.AddUint64(&mmDescribe.afterDescribeCounter, 1)

	if mmDescribe.inspectFuncDescribe != nil {
		mmDescribe.inspectFuncDescribe(ch)
	}

	mm_params := &FeatureCollectorMockDescribeParams{ch}

	// Record call args
	mmDescribe.DescribeMock.mutex.Lock()
	mmDescribe.DescribeMock.callArgs = append(mmDescribe.DescribeMock.callArgs, mm_params)
	mmDescribe.DescribeMock.mutex.Unlock()

	for _, e := range mmDescribe.DescribeMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmDescribe.DescribeMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDescribe.DescribeMock.defaultExpectation.Counter, 1)
		mm_want := mmDescribe.DescribeMock.defaultExpectation.params
		mm_got := FeatureCollectorMockDescribeParams{ch}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDescribe.t.Errorf("FeatureCollectorMock.Describe got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		return

	}
	if mmDescribe.funcDescribe != nil {
		mmDescribe.funcDescribe(ch)
		return
	}
	mmDescribe.t.Fatalf("Unexpected call to FeatureCollectorMock.Describe. %v", ch)

}

// DescribeAfterCounter returns a count of finished FeatureCollectorMock.Describe invocations
func (mmDescribe *FeatureCollectorMock) DescribeAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDescribe.afterDescribeCounter)
}

// DescribeBeforeCounter returns a count of FeatureCollectorMock.Describe invocations
func (mmDescribe *FeatureCollectorMock) DescribeBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDescribe.beforeDescribeCounter)
}

// Calls returns a list of arguments used in each call to FeatureCollectorMock.Describe.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDescribe *mFeatureCollectorMockDescribe) Calls() []*FeatureCollectorMockDescribeParams {
	mmDescribe.mutex.RLock()

	argCopy := make([]*FeatureCollectorMockDescribeParams, len(mmDescribe.callArgs))
	copy(argCopy, mmDescribe.callArgs)

	mmDescribe.mutex.RUnlock()

	return argCopy
}

// MinimockDescribeDone returns true if the count of the Describe invocations corresponds
// the number of defined expectations
func (m *FeatureCollectorMock) MinimockDescribeDone() bool {
	for _, e := range m.DescribeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DescribeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDescribeCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDescribe != nil && mm_atomic.LoadUint64(&m.afterDescribeCounter) < 1 {
		return false
	}
	return true
}

// MinimockDescribeInspect logs each unmet expectation
func (m *FeatureCollectorMock) MinimockDescribeInspect() {
	for _, e := range m.DescribeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FeatureCollectorMock.Describe with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DescribeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDescribeCounter) < 1 {
		if m.DescribeMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to FeatureCollectorMock.Describe")
		} else {
			m.t.Errorf("Expected call to FeatureCollectorMock.Describe with params: %#v", *m.DescribeMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDescribe != nil && mm_atomic.LoadUint64(&m.afterDescribeCounter) < 1 {
		m.t.Error("Expected call to FeatureCollectorMock.Describe")
	}
}

type mFeatureCollectorMockName struct {
	mock               *FeatureCollectorMock
	defaultExpectation *FeatureCollectorMockNameExpectation
	expectations       []*FeatureCollectorMockNameExpectation
}

// FeatureCollectorMockNameExpectation specifies expectation struct of the FeatureCollector.Name
type FeatureCollectorMockNameExpectation struct {
	mock *FeatureCollectorMock

	results *FeatureCollectorMockNameResults
	Counter uint64
}

// FeatureCollectorMockNameResults contains results of the FeatureCollector.Name
type FeatureCollectorMockNameResults struct {
	s1 string
}

// Expect sets up expected params for FeatureCollector.Name
func (mmName *mFeatureCollectorMockName) Expect() *mFeatureCollectorMockName {
	if mmName.mock.funcName != nil {
		mmName.mock.t.Fatalf("FeatureCollectorMock.Name mock is already set by Set")
	}

	if mmName.defaultExpectation == nil {
		mmName.defaultExpectation = &FeatureCollectorMockNameExpectation{}
	}

	return mmName
}

// Inspect accepts an inspector function that has same arguments as the FeatureCollector.Name
func (mmName *mFeatureCollectorMockName) Inspect(f func()) *mFeatureCollectorMockName {
	if mmName.mock.inspectFuncName != nil {
		mmName.mock.t.Fatalf("Inspect function is already set for FeatureCollectorMock.Name")
	}

	mmName.mock.inspectFuncName = f

	return mmName
}

// Return sets up results that will be returned by FeatureCollector.Name
func (mmName *mFeatureCollectorMockName) Return(s1 string) *FeatureCollectorMock {
	if mmName.mock.funcName != nil {
		mmName.mock.t.Fatalf("FeatureCollectorMock.Name mock is already set by Set")
	}

	if mmName.defaultExpectation == nil {
		mmName.defaultExpectation = &FeatureCollectorMockNameExpectation{mock: mmName.mock}
	}
	mmName.defaultExpectation.results = &FeatureCollectorMockNameResults{s1}
	return mmName.mock
}

//Set uses given function f to mock the FeatureCollector.Name method
func (mmName *mFeatureCollectorMockName) Set(f func() (s1 string)) *FeatureCollectorMock {
	if mmName.defaultExpectation != nil {
		mmName.mock.t.Fatalf("Default expectation is already set for the FeatureCollector.Name method")
	}

	if len(mmName.expectations) > 0 {
		mmName.mock.t.Fatalf("Some expectations are already set for the FeatureCollector.Name method")
	}

	mmName.mock.funcName = f
	return mmName.mock
}

// Name implements collector.FeatureCollector
func (mmName *FeatureCollectorMock) Name() (s1 string) {
	mm_atomic.AddUint64(&mmName.beforeNameCounter, 1)
	defer mm_atomic.AddUint64(&mmName.afterNameCounter, 1)

	if mmName.inspectFuncName != nil {
		mmName.inspectFuncName()
	}

	if mmName.NameMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmName.NameMock.defaultExpectation.Counter, 1)

		mm_results := mmName.NameMock.defaultExpectation.results
		if mm_results == nil {
			mmName.t.Fatal("No results are set for the FeatureCollectorMock.Name")
		}
		return (*mm_results).s1
	}
	if mmName.funcName != nil {
		return mmName.funcName()
	}
	mmName.t.Fatalf("Unexpected call to FeatureCollectorMock.Name.")
	return
}

// NameAfterCounter returns a count of finished FeatureCollectorMock.Name invocations
func (mmName *FeatureCollectorMock) NameAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmName.afterNameCounter)
}

// NameBeforeCounter returns a count of FeatureCollectorMock.Name invocations
func (mmName *FeatureCollectorMock) NameBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmName.beforeNameCounter)
}

// MinimockNameDone returns true if the count of the Name invocations corresponds
// the number of defined expectations
func (m *FeatureCollectorMock) MinimockNameDone() bool {
	for _, e := range m.NameMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NameMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNameCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcName != nil && mm_atomic.LoadUint64(&m.afterNameCounter) < 1 {
		return false
	}
	return true
}

// MinimockNameInspect logs each unmet expectation
func (m *FeatureCollectorMock) MinimockNameInspect() {
	for _, e := range m.NameMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to FeatureCollectorMock.Name")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NameMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNameCounter) < 1 {
		m.t.Error("Expected call to FeatureCollectorMock.Name")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcName != nil && mm_atomic.LoadUint64(&m.afterNameCounter) < 1 {
		m.t.Error("Expected call to FeatureCollectorMock.Name")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *FeatureCollectorMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCollectInspect()

		m.MinimockDescribeInspect()

		m.MinimockNameInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *FeatureCollectorMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *FeatureCollectorMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCollectDone() &&
		m.MinimockDescribeDone() &&
		m.MinimockNameDone()
}
